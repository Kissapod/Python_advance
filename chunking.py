'''–†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏ üå∂Ô∏è
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–µ —Å—Ç—Ä–æ–∫–∏: –Ω–∞ –æ–¥–Ω–æ–π ‚Äì —Å–∏–º–≤–æ–ª—ã, –Ω–∞ –¥—Ä—É–≥–æ–π ‚Äì —á–∏—Å–ª–æ n. –ò–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫.

–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é chunked(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Å–ø–∏—Å–æ–∫ –∏ —á–∏—Å–ª–æ, –∑–∞–¥–∞—é—â–µ–µ —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ (–∫—É—Å–∫–∞), –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ —á–∞–Ω–∫–æ–≤ (–∫—É—Å–∫–æ–≤) —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Å–∏–º–≤–æ–ª—ã, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞, –∏ —á–∏—Å–ª–æ n –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.

–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é chunked(), —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç. üòÄ

–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
Sample Input 1:
a b c d e f
2
Sample Output 1:
[['a', 'b'], ['c', 'd'], ['e', 'f']]

Sample Input 2:
a b c d e f
3
Sample Output 2:
[['a', 'b', 'c'], ['d', 'e', 'f']]
'''

#My code
def chunked(lst, n):
    newLst = []
    seq = [lst[0]]
    for i in range(1, len(lst)):
        if i%n == 0:
            newLst.append(seq)
            seq = list(lst[i])
        else:
            seq.append(lst[i])
    newLst.append(seq)
    return newLst
s = input().split(" ")
n = int(input())

print(chunked(s, n))

#Best code
def chunked(symbols, n):
    result = []
    for i in range(0, len(symbols), n):
        result.append(symbols[i:i + n])
    return result

symbols = input().split()
n = int(input())

print(chunked(symbols, n))